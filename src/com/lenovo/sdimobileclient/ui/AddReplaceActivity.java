
package com.lenovo.sdimobileclient.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.NameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import com.foreveross.cache.CacheManager;
import com.foreveross.cache.CacheManager.Callback;
import com.foreveross.cache.CacheParams;
import com.foreveross.cache.ICacheInfo;
import com.foreveross.cache.NetworkPath;
import com.foreveross.cache.network.Netpath;
import com.foreveross.cache.network.ParamPair;
import com.lenovo.sdimobileclient.R;
import com.lenovo.sdimobileclient.api.BreakDown;
import com.lenovo.sdimobileclient.api.BreakDownInfo;
import com.lenovo.sdimobileclient.api.ChangeCategory;
import com.lenovo.sdimobileclient.api.ChangeHistory;
import com.lenovo.sdimobileclient.api.ChangeType;
import com.lenovo.sdimobileclient.api.ProductBox;
import com.lenovo.sdimobileclient.api.ReplacedPartsDescs;
import com.lenovo.sdimobileclient.api.ReplacedPartsFlags;
import com.lenovo.sdimobileclient.api.RootData;
import com.lenovo.sdimobileclient.api.UpChange;
import com.lenovo.sdimobileclient.network.OkHttpHelper;
import com.lenovo.sdimobileclient.network.OkHttpStringCallback;
import com.lenovo.sdimobileclient.utility.Utils;
import com.lenovo.sdimobilecllient.camer.MipcaActivityCapture;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import okhttp3.internal.http.OkHeaders;

public class AddReplaceActivity extends RootActivity {

	private List<ChangeCategory> mChangeCategories;
	private String[] mChangeCategoryArray;
	private String[] mChangeTypeArray;
	private LayoutInflater mInflater;
	private LinearLayout mUpChangeLayout;
	private List<UpChange> mUpChanges;
	private String mReplaceString;
	private List<BreakDown> mBreakDowns;
	private String AutoGeneratedSN;
	private View mBtnSubmit;
	private String mOrderId;
	private String ProductSN;
	private List<ProductBox> mProductBoxList;
	private List<ChangeHistory> mChangeHistories;
	private boolean mNeedRefash;
	private int mLoadID;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		initView();
		initDownChangeView();

		mHttpHelper = OkHttpHelper.getInstance(this);

		mInflater = getLayoutInflater();
		mOrderId = getIntent().getStringExtra("orderId");
		ProductSN = getIntent().getStringExtra("ProductSN");
		mNeedRefash = getIntent().getBooleanExtra("needrefresh", false);

		if (!mNeedRefash && !TextUtils.isEmpty(getIntent().getStringExtra("replace"))) {
			showMsg(getIntent().getStringExtra("replace"));

		} else {
			loadReplaceInfo();
		}

	}

	private void showMsg(String msg) {
		mReplaceString = msg;

		try {
			JSONObject jsonObject = new JSONObject(mReplaceString);
			AutoGeneratedSN = jsonObject.getString("AutoGeneratedSN");
			RootData rootData = new RootData(mReplaceString);

			mProductBoxList = rootData.getArrayData(ProductBox.class);
			mChangeHistories = rootData.getArrayData(ChangeHistory.class);
			mBreakDowns = rootData.getArrayData(BreakDown.class);
			mBoxVisible = (Integer) rootData.getJson().get("BoxVisible");

			if (mBoxVisible == 0) {
				mDownBarView.setVisibility(View.GONE);

			}

			mChangeCategories = rootData.getArrayData(ChangeCategory.class);
			mChangeCategoryArray = new String[mChangeCategories.size()];
			for (int i = 0; i < mChangeCategories.size(); i++) {
				ChangeCategory category = mChangeCategories.get(i);
				mChangeCategoryArray[i] = category.Value;
			}
			mChangeCategory = mChangeCategories.get(0);
			tvCategory.setText(mChangeCategory.Value);

			mPartsFlags = mChangeCategory.getArrayData(ReplacedPartsFlags.class);
			if (mPartsFlags != null && !mPartsFlags.isEmpty()) {
				mChangeIdArray = new String[mPartsFlags.size()];
				for (int i = 0; i < mPartsFlags.size(); i++) {
					mChangeIdArray[i] = mPartsFlags.get(i).Value;
				}
			} else {
				mChangeIdArray = new String[0];
				mPartsFlags = null;
				mReplacedPartsFlags = null;
			}

			mReplacedPartsFlags = mPartsFlags.get(0);
			mDownBtnId.setText(mPartsFlags.get(0).Value);

			mChangeTypes = mChangeCategory.getArrayData(ChangeType.class);
			mChangeTypeArray = new String[mChangeTypes.size()];
			for (int i = 0; i < mChangeTypes.size(); i++) {
				mChangeTypeArray[i] = mChangeTypes.get(i).Value;
			}
			mChangeType = mChangeTypes.get(0);
			tvType.setText(mChangeType.Value);
			onTypeChange(mChangeType);

			mUpChanges = rootData.getArrayData(UpChange.class);
			if (mUpChanges != null && mUpChanges.size() != 0) {
				mUpChangeLayout.setVisibility(View.VISIBLE);
				for (int i = 0; i < mUpChanges.size(); i++) {
					UpChange upChange = mUpChanges.get(i);
					View view = mInflater.inflate(R.layout.replace_up_item, null);
					if (i == 0) {
						CheckBox checkBox = (CheckBox) view.findViewById(android.R.id.checkbox);
						checkBox.setChecked(true);
						mUpChange = upChange;
						mCheckBox = checkBox;
						mSlectMaterialNo = mUpChange.MaterialNo;
					}
					initUpChangeView(upChange, view);

				}
			} else {
				mUpChangeLayout.setVisibility(View.GONE);

				Utils.showToast(this, "暂无约件信息,请先约件");

				// finish();
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			mWaitView.setVisibility(View.GONE);
			mScroll.setVisibility(View.VISIBLE);
		}

	}

	private void loadReplaceInfo() {
		mWaitView.setVisibility(View.VISIBLE);
		mScroll.setVisibility(View.GONE);
		showProgress(mWaitView, true);
		mWaitView.findViewById(R.id.btn_retry).setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				loadReplaceInfo();
			}
		});

		Uri uri = Uri.parse(URL_CHANGE_SOURCES).buildUpon().appendQueryParameter(PARAM_ORDERID, mOrderId)
				.appendQueryParameter(PARAM_ENGINEER, Utils.getEnginnerInfo(this).EngineerNumber).build();
		// NetworkPath path = new Netpath(uri.toString());
		// CacheParams params = new CacheParams(path);
		// mCacheManager.load(CALLBACK_LOADREPLACE, params, this);

		mLoadID = CALLBACK_LOADREPLACE;
		mHttpHelper.load(uri.toString(), mCallback, this);

	}

	private UpChange mUpChange;
	private TextView tvCategory;
	private TextView tvType;

	private void initView() {
		initBackBtn();
		tvCategory = (TextView) findViewById(R.id.tv_category);
		tvType = (TextView) findViewById(R.id.tv_type);
		tvCategory.setOnClickListener(this);
		tvType.setOnClickListener(this);
		mBtnSubmit = findViewById(R.id.btn_submit);
		mBtnSubmit.setOnClickListener(this);
	}

	private View mDownChangeView;
	private TextView mDownCodeView;
	private TextView mDownNumView;
	private TextView mDownBtnId;
	private TextView mDownBtnReason;
	private View mDownBarView, mDownSysCodeView;
	private TextView mDownBtnDesc, mDownDescCode;
	private TextView mDownInputDesc, mDownSysReasion, mSPNoteTv;
	private String mYakuanPrice;
	private View mLineDownSysReasion;
	private View mLineDownInputDesc;
	private View mLayDownBtnReason;

	private void initDownChangeView() {
		mDownChangeView = findViewById(R.id.down_changeview);
		mDownCodeView = (TextView) findViewById(R.id.down_code);
		mDownCodeView.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (!hasFocus) {
					String code = mDownCodeView.getText().toString();
					boolean bcode = false;
					if (mReplacedPartsFlags != null) {
						if (!TextUtils.isEmpty(mReplacedPartsFlags.Code)) {
							int rc = Integer.parseInt(mReplacedPartsFlags.Code);
							if (rc == 40) {
								bcode = true;
							}
						}
					}
					if (!TextUtils.isEmpty(code)) {
						boolean has = false;
						if (mProductBoxList != null && !bcode) {
							for (ProductBox pb : mProductBoxList) {
								if (code.equals(pb.SPSN)) {
									has = true;
									mYakuanPrice = pb.YakuanPrice;
									// mDownNumView.setText(pb.MaterialNo);
								}
							}
						}
						if (!has) {
							mYakuanPrice = null;
							showDialog(DLG_NOINBOX);
						}

						if (mChangeHistories != null && bcode) {
							for (ChangeHistory ch : mChangeHistories) {
								if (code.equals(ch.UpPartsSN)) {
									has = true;
									// mDownNumView.setText(ch.ESDMaterialNo);
									// mDownSysCodeView.setVisibility(View.GONE);
								}
							}
						}
						if (!has && !bcode) {
							mDownSysReasion.setVisibility(View.VISIBLE);
							mLineDownSysReasion.setVisibility(View.VISIBLE);
						} else {
							mDownSysReasion.setVisibility(View.GONE);
							mLineDownSysReasion.setVisibility(View.GONE);
						}
					}
				}
			}
		});
		mDownNumView = (TextView) findViewById(R.id.down_num);

		mDownNumView.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {

				String trim = paramCharSequence.toString().trim();

				for (ProductBox item : mProductBoxList) {

					if (!TextUtils.isEmpty(paramCharSequence) && paramCharSequence.toString().trim().compareToIgnoreCase(item.MaterialNo) == 0) {
						mYakuanPrice = item.YakuanPrice;

					}

				}
			}

			@Override
			public void beforeTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {
				mYakuanPrice = "";
				mGetYakuanPrice = null;
			}

			@Override
			public void afterTextChanged(Editable paramEditable) {
				// TODO Auto-generated method stub

			}
		});

		mDownNumView.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (!hasFocus) {
					String code = mDownNumView.getText().toString();
					if (!TextUtils.isEmpty(code)) {
						boolean has = false;
						boolean bcode = false;
						if (mReplacedPartsFlags != null) {
							if (!TextUtils.isEmpty(mReplacedPartsFlags.Code)) {
								int rc = Integer.parseInt(mReplacedPartsFlags.Code);
								if (rc == 40) {
									bcode = true;
								}
							}
						}
						if (mProductBoxList != null && !bcode) {
							for (ProductBox pb : mProductBoxList) {
								if (code.compareToIgnoreCase(pb.MaterialNo) == 0) {

									has = true;

									mYakuanPrice = pb.YakuanPrice;
									// mDownCodeView.setText(pb.SPSN);
									// mDownSysCodeView.setVisibility(View.GONE);
								}
							}
						}
						if (!has) {
							mYakuanPrice = "";

						}
						if (mChangeHistories != null && !bcode) {
							for (ChangeHistory ch : mChangeHistories) {
								if (code.equals(ch.ESDMaterialNo)) {
									has = true;
									// mDownCodeView.setText(ch.UpPartsSN);
									// mDownSysCodeView.setVisibility(View.GONE);
								}
							}
						}

						if (!has && !bcode) {
							mDownSysReasion.setVisibility(View.VISIBLE);
							mLineDownSysReasion.setVisibility(View.VISIBLE);
						} else {
							mDownSysReasion.setVisibility(View.GONE);
							mLineDownSysReasion.setVisibility(View.GONE);
						}
					}
				}
			}
		});
		findViewById(R.id.down_code_bar).setOnClickListener(this);
		mDownBarView = findViewById(R.id.down_box);
		mDownBarView.setOnClickListener(this);
		mDownSysCodeView = findViewById(R.id.down_sys_code);
		mDownSysCodeView.setOnClickListener(this);
		mDownBtnId = (TextView) findViewById(R.id.down_btn_id);
		mDownBtnId.setOnClickListener(this);
		mDownBtnReason = (TextView) findViewById(R.id.down_btn_reason);
		mLayDownBtnReason = findViewById(R.id.lay_down_btn_reason);
		mDownBtnReason.setOnClickListener(this);
		mDownBtnDesc = (TextView) findViewById(R.id.down_btn_desc);
		mDownBtnDesc.setOnClickListener(this);
		mDownDescCode = (TextView) findViewById(R.id.downdesccode);

		mLineDownSysReasion = findViewById(R.id.line_down_sys_reasion);

		mDownSysReasion = (TextView) findViewById(R.id.down_sys_reasion);
		mDownSysReasion.setOnClickListener(this);

		mLineDownInputDesc = findViewById(R.id.line_down_input_desc);
		mDownInputDesc = (TextView) findViewById(R.id.down_input_desc);
		mSPNoteTv = (TextView) findViewById(R.id.down_sp_note);
		mUpChangeLayout = (LinearLayout) findViewById(R.id.upchange_view);

		/**
		 * 等待视图
		 */
		mWaitView = findViewById(R.id.progress);

		mScroll = findViewById(R.id.sroll);

	}

	private void refreshDownChangeView() {
		mDownChangeView.setVisibility(View.VISIBLE);

		if (mBoxVisible == 1) {

			mDownBarView.setVisibility(View.VISIBLE);
		}
		mDownSysCodeView.setVisibility(View.VISIBLE);
		// mDownBtnReason.setVisibility(View.GONE);
		mDownBtnId.setVisibility(View.VISIBLE);
		mDownBtnDesc.setVisibility(View.VISIBLE);
		mDownDescCode.setVisibility(View.VISIBLE);
		mDownSysReasion.setVisibility(View.GONE);
		mLineDownSysReasion.setVisibility(View.GONE);
		mDownInputDesc.setVisibility(View.GONE);
		mLineDownInputDesc.setVisibility(View.GONE);
		initTextView();
	}

	private static final int REQUEST_CODE = 1001;
	private static final int REQUEST_NUM = 1002;
	private static final int REQUEST_BOX = 1003;

	private void initTextView() {
		mDownCodeView.setText("");
		mDownNumView.setText("");
		mDownBtnDesc.setText("");
		mDownDescCode.setText("");
		// mDownBtnId.setText("");
		// mDownBtnReason.setText("");
		mDownInputDesc.setText("");
		mDownSysReasion.setText("");
		// mReplacedPartsFlags = null;
		// mPartsDescs = null;
		// mBreakDownInfo = null;
	}

	private void doSubmit() {
		String spnote = mSPNoteTv.getText().toString();

		HashMap<String, String> postMaps = new HashMap<String, String>();

		postMaps.put(PARAM_ORDERID, mOrderId);
		postMaps.put(PARAM_ENGINEER, Utils.getEnginnerInfo(this).EngineerNumber);
		postMaps.put(PARAM_PRODUCTSN, ProductSN);
		postMaps.put("ChangeCategoryCode", mChangeCategory.Code);
		postMaps.put("ChangeCategoryValue", mChangeCategory.Value);
		postMaps.put("ChangeTypeCode", mChangeType.Code);
		postMaps.put("ChangeTypeValue", mChangeType.Value);
		postMaps.put("SpeNote", spnote);

		int code = Integer.parseInt(mChangeCategory.Code);
		int type = Integer.parseInt(mChangeType.Code);

		// TODO
		if (mUpChange != null) {
			postMaps.put("UpPartsSN", mUpChange.SPSN);
			postMaps.put("UpMaterialNo", mUpChange.MaterialNo);
		}

		postMaps.put("DownPartsSN", mDownCodeView.getText().toString());
		postMaps.put("DownMaterialNo", mDownNumView.getText().toString());
		if (mReplacedPartsFlags != null) {
			postMaps.put("ReplacedPartsFlag", mReplacedPartsFlags.Code);
		}
		if (mPartsDescs != null)
			postMaps.put("ReplacedPartsDesc", mPartsDescs.Code);

		if (mBreakDownInfo != null) {
			postMaps.put("FaultDesc", mBreakDownInfo.Value);
			if (mBreakDownInfo.Value.equals("其他")) {
				postMaps.put("FaultDesc", mDownInputDesc.getText().toString());
			}
			postMaps.put("FaultCode", mBreakDownInfo.Code + "");

		}
		postMaps.put("Remark", mDownSysReasion.getText().toString());
		if (code == 40) { // 非联想换件的故障现象只能输入
			postMaps.put("FaultDesc", mDownInputDesc.getText().toString());
		} else if (type == 10) {// 一换一

			if (mUpChanges == null || mUpChanges.size() == 0) {// 必须有换上件

				showDialog(DLG_NO_UPCHANGES);
				return;
			} else {

				mPostValues = postMaps;
				if (!TextUtils.isEmpty(mYakuanPrice)) { // 判断是否能从本地渠道押款价
					float price = Float.parseFloat(mYakuanPrice);

					if (mUpChange != null && !TextUtils.isEmpty(mUpChange.YakuanPrice)) { // 有押款家就直接比较提交
						float p = Float.parseFloat(mUpChange.YakuanPrice);
						if (price - p != 0) {// 价格不相等提示
							showDialog(DLG_SURE_ALERT);
							return;
						} else {// 相等提交

							mPostValues = postMaps;
							submit();
						}

					}
				} else {// 没有押款就从服务器获取押款价 再判断
					mPostValues = postMaps;
					// List<NameValuePair> postValues1 = new
					// ArrayList<NameValuePair>();
					HashMap<String, String> hashMap = new HashMap<String, String>();
					//
					// postValues1.add(new ParamPair("Engineer",
					// Utils.getEnginnerInfo(this).EngineerID));
					// postValues1.add(new ParamPair("MaterialID",
					// mDownNumView.getText().toString()));
					hashMap.put(PARAM_ENGINEER, Utils.getEnginnerInfo(this).EngineerID);
					hashMap.put("MaterialID", mDownNumView.getText().toString());
					showDialog(DLG_SENDING);
					mBtnSubmit.setEnabled(false);
					// NetworkPath path = new Netpath(URL_GETYAKUANPRICE,
					// postValues1);
					// CacheParams params = new
					// CacheParams(CacheParams.PRIORITY_NORMAL, path,
					// CacheParams.PRIORITY_NORMAL);
					// mCacheManager.load(CLLBACK_YAKUANJIA, params, this);

					mLoadID = CLLBACK_YAKUANJIA;
					mHttpHelper.load(URL_GETYAKUANPRICE, mCallback, hashMap, this);
					return;
				}
			}
		} else if (type == 30 && mUpChanges == null && mUpChanges.size() == 0) { // 如果是加装并且
																					// 没有换上件
																					// 不能提交

			showDialog(DLG_NO_UPCHANGES);
			return;

		} else {
			mPostValues = postMaps;
			submit();

		}

	}

	private void submit() {
		showDialog(DLG_SENDING);
		mBtnSubmit.setEnabled(false);
		// NetworkPath path = new Netpath(URL_CHANGE_ADD, mPostValues);
		// CacheParams params = new CacheParams(CacheParams.PRIORITY_NORMAL,
		// path, CacheParams.PRIORITY_NORMAL);
		// mCacheManager.load(CLLBACK_SUBMIT, params, this);
		mLoadID = CLLBACK_SUBMIT;
		mHttpHelper.load(URL_CHANGE_ADD, mCallback, mPostValues, this);
	}

	private HashMap<String, String> mPostValues;
	private static final int CLLBACK_SUBMIT = 1001;
	private static final int CALLBACK_LOADREPLACE = 1002;
	private static final int CLLBACK_YAKUANJIA = 1004;

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_back:

			setResult(RESULT_CANCELED);
			finish();
			break;
		case R.id.tv_category:
			showDialog(DLG_CATEGORY);
			break;
		case R.id.btn_submit:
			doSubmit();
			break;
		case R.id.down_box: {
			Intent intent = new Intent(this, ReplaceBoxActivity.class);
			intent.putExtra("replace", mReplaceString);
			startActivityForResult(intent, REQUEST_BOX);
		}
			break;
		case R.id.down_sys_code: {
			initTextView();
			mDownCodeView.setText(AutoGeneratedSN);
			mDownSysReasion.setVisibility(View.VISIBLE);
			mLineDownSysReasion.setVisibility(View.VISIBLE);
		}
			break;
		case R.id.down_code_bar: {
			Intent intent = new Intent(this, MipcaActivityCapture.class);
			startActivityForResult(intent, REQUEST_CODE);
		}
			break;
		case R.id.down_sys_reasion: {
			createReasionDialog().show();
		}
			break;
		case R.id.down_btn_id:
			createIDDialog().show();
			break;
		case R.id.down_btn_reason:
			createDescDialog().show();
			break;
		case R.id.down_btn_desc:
			createBreakDownDialog().show();
			break;
		case R.id.tv_type:
			if (mChangeTypes != null) {
				createSubDialog().show();
			} else {
				Toast.makeText(getApplicationContext(), "请选择换件类别", Toast.LENGTH_SHORT).show();
			}
			break;

		default:
			super.onClick(v);
			break;
		}
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (requestCode) {
		case REQUEST_CODE:
			if (resultCode == RESULT_OK && data != null) {
				String code = data.getStringExtra("code");
				mDownCodeView.setText(code);
			}
			break;
		case REQUEST_NUM:
			if (resultCode == RESULT_OK && data != null) {
				String code = data.getStringExtra("code");
				mDownNumView.setText(code);
			}
			break;
		case REQUEST_BOX:
			if (resultCode == RESULT_OK && data != null) {
				String desc = mDownBtnDesc.getText().toString();
				String code = mDownDescCode.getText().toString();
				int dv = mDownBtnDesc.getVisibility();
				int cv = mDownDescCode.getVisibility();
				onTypeChange(mChangeType);
				mDownBtnDesc.setVisibility(dv);
				mDownDescCode.setVisibility(cv);
				mDownBtnDesc.setText(desc);
				mDownDescCode.setText(code);
				String changeHistory = data.getStringExtra("ChangeHistory");
				String productBox = data.getStringExtra("ProductBox");
				if (!TextUtils.isEmpty(changeHistory)) {
					ChangeHistory history = new ChangeHistory(changeHistory);
					mDownCodeView.setText(history.UpPartsSN);
					mDownNumView.setText(history.ESDMaterialNo);
					// mDownSysCodeView.setVisibility(View.GONE);
				} else if (!TextUtils.isEmpty(productBox)) {
					ProductBox box = new ProductBox(productBox);
					mYakuanPrice = box.YakuanPrice;
					mDownCodeView.setText(box.SPSN);
					mDownNumView.setText(box.MaterialNo);
					// mDownSysCodeView.setVisibility(View.GONE);
				}
			}
			break;
		default:
			super.onActivityResult(requestCode, resultCode, data);
			break;
		}
	}

	private CheckBox mCheckBox;
	private String mSlectMaterialNo;

	private void initUpChangeView(final UpChange upChange, View view) {
		TextView tv1 = (TextView) view.findViewById(R.id.tv_up1);
		TextView tv2 = (TextView) view.findViewById(R.id.tv_up2);
		TextView tv3 = (TextView) view.findViewById(R.id.tv_up3);
		TextView tv4 = (TextView) view.findViewById(R.id.tv_up4);
		TextView tv5 = (TextView) view.findViewById(R.id.tv_up5);
		mUpChangeLayout.addView(view);
		tv1.setText(upChange.SPSN);
		tv2.setText(upChange.MaterialNo);
		tv3.setText(upChange.SPDesc);
		tv4.setText(upChange.SPTypeDesc);
		tv5.setText(upChange.YakuanPrice);

		view.setTag(upChange.MaterialNo);

		view.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				if (mCheckBox != null) {
					mCheckBox.setChecked(false);
				}

				mCheckBox = (CheckBox) v.findViewById(android.R.id.checkbox);
				mCheckBox.setChecked(true);

				if (mCheckBox.isChecked()) {
					mSlectMaterialNo = (String) v.getTag();

				}
				mUpChange = upChange;

				mBreakDownInfo = null;
				mDownBtnDesc.setText("");
				mDownDescCode.setText("");
				if (mReplacedPartsFlags != null) {
					if (!TextUtils.isEmpty(mReplacedPartsFlags.Code)) {
						int code = Integer.parseInt(mReplacedPartsFlags.Code);
						if (code == 40) {
							if (mUpChange != null) {
								mDownCodeView.setText(mUpChange.SPSN);
								mDownNumView.setText(mUpChange.MaterialNo);
							} else {
								mDownCodeView.setText("");
								mDownNumView.setText("");
							}
							mDownSysCodeView.setVisibility(View.GONE);
							mDownBarView.setVisibility(View.GONE);
						}

					}
				}
			}
		});
		// view.findViewById(android.R.id.checkbox).setOnClickListener(new
		// OnClickListener() {
		//
		// @Override
		// public void onClick(View v) {
		// if (mCheckBox != null) {
		// mCheckBox.setChecked(false);
		// }
		// mCheckBox = (CheckBox) v;
		// mCheckBox.setChecked(true);
		// mUpChange = upChange;
		//
		// mBreakDownInfo = null;
		// mDownBtnDesc.setText("");
		// mDownDescCode.setText("");
		// if (mReplacedPartsFlags != null) {
		// if (!TextUtils.isEmpty(mReplacedPartsFlags.Code)) {
		// int code = Integer.parseInt(mReplacedPartsFlags.Code);
		// if (code == 40) {
		// if (mUpChange != null) {
		// mDownCodeView.setText(mUpChange.SPSN);
		// mDownNumView.setText(mUpChange.MaterialNo);
		// } else {
		// mDownCodeView.setText("");
		// mDownNumView.setText("");
		// }
		// mDownSysCodeView.setVisibility(View.GONE);
		// mDownBarView.setVisibility(View.GONE);
		// }
		//
		// }
		// }
		// }
		// });
	}

	private static final int DLG_NO_UPCHANGES = 8006;
	private static final int DLG_CATEGORY = 8001;
	private static final int DLG_TYPE = 8002;
	private static final int DLG_SURE_ALERT = 9001;
	private static final int DLG_NODISABLE = 8003;
	private static final int DLG_PRICE_DIFFERENCE = 8004;
	private static final int DLG_NOINBOX = 8005;
	private ChangeCategory mChangeCategory;
	private List<ChangeType> mChangeTypes;
	private ChangeType mChangeType;
	private boolean showmDownBtnReason = true;

	@Override
	public Dialog onCreateDialog(int id) {
		Dialog result = null;
		switch (id) {

		case DLG_NO_UPCHANGES: {

			AlertDialog.Builder builder = new AlertDialog.Builder(getRootActivity(this));

			AlertDialog dialog = builder.setTitle("提示").setMessage("暂无换上件信息,请先约件或更改换件类型").setPositiveButton("确认", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {

					dialog.dismiss();
				}
			}).create();
			result = dialog;
		}
			break;
		case DLG_NOINBOX: {

			AlertDialog.Builder builder = new AlertDialog.Builder(getRootActivity(this));

			AlertDialog dialog = builder.setTitle("提示").setMessage("该编码装箱单不存在请填写原因").setPositiveButton("确认", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {

					dialog.dismiss();
				}
			}).create();
			result = dialog;
		}
			break;

		case DLG_PRICE_DIFFERENCE: {

			AlertDialog.Builder builder = new AlertDialog.Builder(getRootActivity(this));

			AlertDialog dialog = builder.setTitle("提示").setMessage("换下件价款价" + mGetYakuanPrice + "，与换上件有价差，可能会产生扣款，请确认是否提交！")
					.setPositiveButton("确认", new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {

							submit();
							dialog.dismiss();
						}
					}).setNegativeButton("取消", new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {

							dialog.dismiss();

						}
					}).create();
			result = dialog;
		}
			break;
		case DLG_NODISABLE: {

			AlertDialog.Builder builder = new AlertDialog.Builder(getRootActivity(this));

			AlertDialog dialog = builder.setTitle("警告").setMessage("换下件编码无效！").setPositiveButton("确认", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {

					dialog.dismiss();
				}
			}).create();
			result = dialog;
		}
			break;

		case DLG_SURE_ALERT: {

			AlertDialog.Builder builder = new AlertDialog.Builder(this);

			builder.setMessage("换下件价款价" + mYakuanPrice + "，与换上件有价差，可能会产生扣款，请确认是否提交！").setTitle("注意");
			builder.setIcon(android.R.drawable.ic_dialog_alert);
			AlertDialog alert = builder.create();
			alert.setButton(DialogInterface.BUTTON_POSITIVE, "是", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {
					submit();
				}
			});
			alert.setButton(DialogInterface.BUTTON_NEGATIVE, "否", (DialogInterface.OnClickListener) null);
			alert.setOwnerActivity(this);
			alert.setCancelable(false);
			result = alert;
		}
			break;
		case DLG_CATEGORY: {

			// final Dialog dialog = new Dialog(this, R.style.dialog);
			//
			// View inflate = mInflater.inflate(R.layout.dialog, null);
			//
			// ListView findViewById = (ListView)
			// inflate.findViewById(android.R.id.list);
			//
			// findViewById.setAdapter(new ArrayAdapter(this,
			// R.layout.item_lv_diaog, mChangeCategoryArray));
			//
			// findViewById.setOnItemClickListener(new OnItemClickListener() {
			//
			// @Override
			// public void onItemClick(AdapterView<?> paramAdapterView, View
			// paramView, int paramInt, long paramLong) {
			//
			// ChangeCategory category = mChangeCategories.get(paramInt);
			// if (mChangeCategory != null && mChangeCategory == category) {
			// } else {
			// mChangeCategory = category;
			// tvCategory.setText(mChangeCategory.Value);
			// tvType.setText("");
			// mChangeTypes = mChangeCategory.getArrayData(ChangeType.class);
			// mChangeTypeArray = new String[mChangeTypes.size()];
			// for (int i = 0; i < mChangeTypes.size(); i++) {
			// mChangeTypeArray[i] = mChangeTypes.get(i).Value;
			// }
			// mChangeType = mChangeTypes.get(0);
			// tvType.setText(mChangeType.Value);
			// onTypeChange(mChangeType);
			// }
			//
			// }
			// });
			//
			// dialog.setContentView(inflate);
			// dialog.setCanceledOnTouchOutside(true);
			// WindowManager windowManager = getWindowManager();
			// Display display = windowManager.getDefaultDisplay();
			//
			// WindowManager.LayoutParams lp =
			// dialog.getWindow().getAttributes();
			// lp.height = (int) (LayoutParams.WRAP_CONTENT); // 高度设置为屏幕的0.8
			// lp.width = (int) (LayoutParams.MATCH_PARENT);
			// dialog.getWindow().setGravity(Gravity.BOTTOM);
			// dialog.getWindow().setAttributes(lp);
			// result = dialog;

			AlertDialog dialog = new AlertDialog.Builder(this).setTitle("换件类别")
					.setSingleChoiceItems(mChangeCategoryArray, 0, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							ChangeCategory category = mChangeCategories.get(which);
							if (mChangeCategory != null && mChangeCategory == category) {
							} else {
								mChangeCategory = category;
								tvCategory.setText(mChangeCategory.Value);
								tvType.setText("");

								mDownBtnId.setText("");
								mChangeTypes = mChangeCategory.getArrayData(ChangeType.class);
								mChangeTypeArray = new String[mChangeTypes.size()];
								for (int i = 0; i < mChangeTypes.size(); i++) {
									mChangeTypeArray[i] = mChangeTypes.get(i).Value;
								}
								mChangeType = mChangeTypes.get(0);
								tvType.setText(mChangeType.Value);

								mPartsFlags = mChangeCategory.getArrayData(ReplacedPartsFlags.class);
								if (mPartsFlags != null && !mPartsFlags.isEmpty()) {
									mChangeIdArray = new String[mPartsFlags.size()];
									for (int i = 0; i < mPartsFlags.size(); i++) {
										mChangeIdArray[i] = mPartsFlags.get(i).Value;
									}
								} else {
									mChangeIdArray = new String[0];
									mPartsFlags = null;
									mReplacedPartsFlags = null;
								}
								mReplacedPartsFlags = mPartsFlags == null ? null : mPartsFlags.get(0);
								mDownBtnId.setText(mPartsFlags == null ? "" : (mPartsFlags.get(0) == null ? "" : mPartsFlags.get(0).Value));

								onTypeChange(mChangeType);
							}
							dialog.dismiss();
						}
					}).create();

			result = dialog;

		}
			break;
		default:
			result = super.onCreateDialog(id);
			break;
		}
		return result;
	}

	@Override
	public void onPrepareDialog(int id, Dialog dialog) {
		switch (id) {
		case DLG_SURE_ALERT: {
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setMessage("归还价格与借用价格不一致，有差价要承担扣款,是否提交?");
			builder.setIcon(android.R.drawable.ic_dialog_alert);
			AlertDialog alert = builder.create();
			alert.setButton(DialogInterface.BUTTON_POSITIVE, "是", new DialogInterface.OnClickListener() {

				@Override
				public void onClick(DialogInterface dialog, int which) {
					submit();
				}
			});
			alert.setButton(DialogInterface.BUTTON_NEGATIVE, "否", (DialogInterface.OnClickListener) null);
			alert.setOwnerActivity(this);
			alert.setCancelable(false);
			dialog = alert;
		}
			break;
		// case DLG_CATEGORY: {
		// AlertDialog resultdialog = new
		// AlertDialog.Builder(this).setTitle("换件类别")
		// .setSingleChoiceItems(mChangeCategoryArray, 0, new
		// DialogInterface.OnClickListener() {
		// @Override
		// public void onClick(DialogInterface dialog, int which) {
		// ChangeCategory category = mChangeCategories.get(which);
		// if (mChangeCategory != null && mChangeCategory == category) {
		// } else {
		// mChangeCategory = category;
		// tvCategory.setText(mChangeCategory.Value);
		// tvType.setText("");
		// mChangeTypes = mChangeCategory.getArrayData(ChangeType.class);
		// mChangeTypeArray = new String[mChangeTypes.size()];
		// for (int i = 0; i < mChangeTypes.size(); i++) {
		// mChangeTypeArray[i] = mChangeTypes.get(i).Value;
		// }
		// mChangeType = mChangeTypes.get(0);
		// tvType.setText(mChangeType.Value);
		// onTypeChange(mChangeType);
		// }
		// dialog.dismiss();
		// }
		// }).create();
		// dialog = resultdialog;
		// }
		// break;
		default:
			super.onPrepareDialog(id, dialog);
			break;
		}
	}

	public void onTypeChange(ChangeType changeType) {
		refreshDownChangeView();
		int code = Integer.parseInt(changeType.Code);
		switch (code) {
		case 10: {

			if (mUpChanges != null && mUpChanges.size() != 0) {

				mUpChangeLayout.setVisibility(View.VISIBLE);
			}
			// if (mUpChanges != null && !mUpChanges.isEmpty()) {
			// } else {
			// mUpChangeLayout.setVisibility(View.GONE);
			// }
			int c = Integer.parseInt(mChangeCategory.Code);
			switch (c) {
			case 10:

				if (showmDownBtnReason) {

					mLayDownBtnReason.setVisibility(View.GONE);
				}
				break;
			case 20:
				// mDownBtnId.setVisibility(View.GONE);
				// mDownBtnReason.setVisibility(View.GONE);
				break;
			case 30:
				mDownBtnReason.setVisibility(View.GONE);
				break;
			case 40:
				mDownBarView.setVisibility(View.GONE);
				mDownSysCodeView.setVisibility(View.GONE);
				mDownBtnId.setVisibility(View.GONE);
				mDownBtnReason.setVisibility(View.GONE);
				mDownBtnDesc.setVisibility(View.GONE);
				mDownDescCode.setVisibility(View.GONE);
				mDownInputDesc.setVisibility(View.VISIBLE);
				mLineDownInputDesc.setVisibility(View.VISIBLE);
				break;
			case 50:
				mDownBtnReason.setVisibility(View.GONE);
				break;
			}
		}
			break;
		case 20: {
			mUpChangeLayout.setVisibility(View.GONE);
			int c = Integer.parseInt(mChangeCategory.Code);
			switch (c) {
			case 10:
				mDownBtnReason.setVisibility(View.GONE);
				break;
			case 20:
				mDownBtnId.setVisibility(View.GONE);
				mDownBtnReason.setVisibility(View.GONE);
				break;
			case 30:
				mDownBtnReason.setVisibility(View.GONE);
				break;
			case 40:
				mDownBarView.setVisibility(View.GONE);
				mDownSysCodeView.setVisibility(View.GONE);
				mDownBtnId.setVisibility(View.GONE);
				mDownBtnReason.setVisibility(View.GONE);
				mDownBtnDesc.setVisibility(View.GONE);
				mDownDescCode.setVisibility(View.GONE);
				mDownInputDesc.setVisibility(View.VISIBLE);
				mLineDownInputDesc.setVisibility(View.VISIBLE);
				break;
			case 50:

				break;
			}
		}
			break;
		case 30:

			if (mUpChanges != null && mUpChanges.size() != 0) {

				mUpChangeLayout.setVisibility(View.VISIBLE);
			}
			mDownChangeView.setVisibility(View.GONE);
			break;
		default:
			mUpChangeLayout.setVisibility(View.GONE);
			break;
		}
	}

	/**
	 * 换件类型
	 * 
	 * @return
	 */
	private Dialog createSubDialog() {
		AlertDialog dialog = new AlertDialog.Builder(this).setTitle("换件类型").setSingleChoiceItems(mChangeTypeArray, 0, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				ChangeType changeType = mChangeTypes.get(which);
				if (mChangeType != null && mChangeType == changeType) {
				} else {
					mChangeType = changeType;
					tvType.setText(changeType.Value);
					onTypeChange(changeType);
				}
				dialog.dismiss();
			}
		}).create();
		return dialog;
	}

	private ReplacedPartsDescs mPartsDescs;

	/**
	 * 换下件非损原因
	 * 
	 * @return
	 */
	private Dialog createDescDialog() {
		String[] descArray = new String[0];
		if (mDescs != null) {
			descArray = new String[mDescs.size()];
			for (int i = 0; i < mDescs.size(); i++) {
				descArray[i] = mDescs.get(i).Value;
			}
		}
		AlertDialog dialog = new AlertDialog.Builder(this).setTitle("换下件非损原因").setSingleChoiceItems(descArray, 0, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				mPartsDescs = mDescs.get(which);
				mDownBtnReason.setText(mPartsDescs.Value);
				dialog.dismiss();
			}
		}).create();
		return dialog;
	}

	private Dialog createReasionDialog() {
		AlertDialog dialog = new AlertDialog.Builder(this).setTitle("原因").setSingleChoiceItems(R.array.reasion, 0, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				String reasion = getResources().getStringArray(R.array.reasion)[which];
				mDownSysReasion.setText(reasion);
				dialog.dismiss();
			}
		}).create();
		return dialog;
	}

	private BreakDownInfo mBreakDownInfo;
	private List<BreakDownInfo> mBreakDownInfos;

	/**
	 * 故障现象
	 * 
	 * @return
	 */
	private Dialog createBreakDownDialog() {
		String[] descArray = new String[0];
		mBreakDownInfos = null;
		// String code = mDownNumView.getText().toString();

		/**
		 * 根据当前输入编码 来确定故障现象
		 */
		if (mBreakDowns != null && !TextUtils.isEmpty(mSlectMaterialNo)) {

			for (BreakDown breakDown : mBreakDowns) {
				if (mSlectMaterialNo.equals(breakDown.MaterialNo)) {
					mBreakDownInfos = breakDown.getArrayData(BreakDownInfo.class);
				}
			}
		}
		if (mBreakDownInfos == null) {
			mBreakDownInfos = new ArrayList<BreakDownInfo>();
		}
		List<BreakDownInfo> tmpList = new ArrayList<BreakDownInfo>();
		tmpList.addAll(mBreakDownInfos);
		tmpList.add(new BreakDownInfo("-", "其他"));
		mBreakDownInfos = tmpList;
		descArray = new String[mBreakDownInfos.size()];
		for (int i = 0; i < mBreakDownInfos.size(); i++) {
			BreakDownInfo breakDownInfo = mBreakDownInfos.get(i);
			descArray[i] = breakDownInfo.Value;
		}
		AlertDialog dialog = new AlertDialog.Builder(this).setTitle("故障现象").setSingleChoiceItems(descArray, 0, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				mBreakDownInfo = mBreakDownInfos.get(which);
				mDownBtnDesc.setText(mBreakDownInfo.Value);
				mDownDescCode.setText(mBreakDownInfo.Code);
				if (mBreakDownInfo.Value.equals("其他")) {
					mDownInputDesc.setVisibility(View.VISIBLE);
					mLineDownInputDesc.setVisibility(View.VISIBLE);
				} else {
					mDownInputDesc.setText("");
					mDownInputDesc.setVisibility(View.GONE);
					mLineDownInputDesc.setVisibility(View.GONE);
				}
				dialog.dismiss();
			}

		}).create();
		return dialog;
	}

	private String[] mChangeIdArray;
	private List<ReplacedPartsFlags> mPartsFlags;
	private ReplacedPartsFlags mReplacedPartsFlags;
	private List<ReplacedPartsDescs> mDescs;
	private View mWaitView;
	private View mScroll;
	private String mGetYakuanPrice;
	private int mBoxVisible;

	private Dialog createIDDialog() {
		mPartsFlags = mChangeCategory.getArrayData(ReplacedPartsFlags.class);
		if (mPartsFlags != null && !mPartsFlags.isEmpty()) {
			mChangeIdArray = new String[mPartsFlags.size()];
			for (int i = 0; i < mPartsFlags.size(); i++) {
				mChangeIdArray[i] = mPartsFlags.get(i).Value;
			}
		} else {
			mChangeIdArray = new String[0];
			mPartsFlags = null;
			mReplacedPartsFlags = null;
		}
		AlertDialog dialog = new AlertDialog.Builder(this).setTitle("换下件标识").setSingleChoiceItems(mChangeIdArray, 0, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				ReplacedPartsFlags changeType = mPartsFlags.get(which);
				if (mReplacedPartsFlags != null && mReplacedPartsFlags == changeType) {

				} else {
					mReplacedPartsFlags = changeType;
					if (!TextUtils.isEmpty(mReplacedPartsFlags.Code)) {
						int code = Integer.parseInt(mReplacedPartsFlags.Code);
						if (code == 40) {
							if (mUpChange != null) {
								mDownCodeView.setText(mUpChange.SPSN);
								mDownNumView.setText(mUpChange.MaterialNo);
							} else {
								mDownCodeView.setText("");
								mDownNumView.setText("");
							}
							mDownSysCodeView.setVisibility(View.GONE);
							mDownBarView.setVisibility(View.GONE);
						} else {
							mDownSysCodeView.setVisibility(View.VISIBLE);

							if (mBoxVisible == 1) {

								mDownBarView.setVisibility(View.VISIBLE);
							}

						}

					}
					mDownBtnId.setText(changeType.Value);
					mDescs = mReplacedPartsFlags.getArrayData(ReplacedPartsDescs.class);
					if (mDescs != null && !mDescs.isEmpty()) {
						showmDownBtnReason = false;
						mLayDownBtnReason.setVisibility(View.VISIBLE);
					} else {
						showmDownBtnReason = true;
						mLayDownBtnReason.setVisibility(View.GONE);
					}
				}
				dialog.dismiss();
			}
		}).create();
		return dialog;
	}

	@Override
	protected void notifyView() {
		mBtnSubmit.setEnabled(false);
		showDialog(DLG_SENDING);
	}

	@Override
	protected int getContentViewId() {
		return R.layout.replace;
	}

	@Override
	public void finish() {
		mHttpHelper.cancle(AddReplaceActivity.class);
		super.finish();
	}

	OkHttpStringCallback mCallback = new OkHttpStringCallback(this) {

		@Override
		public void onResponse(String result) {

			switch (mLoadID) {
			case CALLBACK_LOADREPLACE:

				// showProgress(mScroll, true);
				mScroll.setVisibility(View.VISIBLE);
				showProgress(mWaitView, false);
				break;

			default:
				break;
			}

			boolean safe = mHttpHelper.isSuccessResult(result, AddReplaceActivity.this);

			dismisDialog(DLG_SENDING);
			mBtnSubmit.setEnabled(true);
			if (!safe) {
				return;
			}

			switch (mLoadID) {

			case CLLBACK_YAKUANJIA: {
				mBtnSubmit.setEnabled(true);

				RootData rootData = new RootData(result);

				JSONObject json = rootData.getJson();

				try {
					mGetYakuanPrice = (String) json.get("YakuanPrice");
					if (TextUtils.equals("-1", mGetYakuanPrice)) {

						showDialog(DLG_NODISABLE);

					} else if (Float.parseFloat(mGetYakuanPrice) - Float.parseFloat(mUpChange.YakuanPrice) == 0) {

						submit();

					} else {
						showDialog(DLG_PRICE_DIFFERENCE);
					}

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
				break;
			case CLLBACK_SUBMIT:

				Utils.showToast(AddReplaceActivity.this, "添加成功");
				setResult(RESULT_OK);
				finish();
				break;

			case CALLBACK_LOADREPLACE:
				RootData rootData = new RootData(result);

				showMsg(rootData.getJson().toString());
				break;

			default:
				break;
			}

		}
	};
	private OkHttpHelper mHttpHelper;

	protected void showProgress(View progressLayout, boolean show) {
		if (show) {
			progressLayout.findViewById(R.id.error_footer).setVisibility(View.GONE);
			progressLayout.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
		} else {
			progressLayout.findViewById(R.id.error_footer).setVisibility(View.VISIBLE);
			progressLayout.findViewById(R.id.progressBar).setVisibility(View.GONE);
		}
	}
}
